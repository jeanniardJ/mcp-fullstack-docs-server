#!/usr/bin/env node

/**
 * Script pour t√©l√©charger la documentation HTML depuis le d√©p√¥t officiel MDN
 * Utilise le d√©p√¥t github.com/mdn/content au lieu de scraper le site web
 * √âvite les blocages de Mozilla et garantit une source fiable
 */

import { execSync } from 'child_process';
import { mkdirSync, existsSync, writeFileSync, readdirSync, readFileSync, statSync } from 'fs';
import { join, dirname, basename, extname } from 'path';
import { fileURLToPath } from 'url';

const __filename = fileURLToPath(import.meta.url);
const __dirname = dirname(__filename);

const DOCS_DIR = join(__dirname, '..', 'docs', 'html');
const TEMP_DIR = join(__dirname, '..', 'temp', 'mdn-content');

// üé® Syst√®me de statuts et de progression
const colors = {
    reset: '\x1b[0m',
    bright: '\x1b[1m',
    red: '\x1b[31m',
    green: '\x1b[32m',
    yellow: '\x1b[33m',
    blue: '\x1b[34m',
    magenta: '\x1b[35m',
    cyan: '\x1b[36m'
};

function logStatus(status, message, details = '') {
    const timestamp = new Date().toISOString().split('T')[1].split('.')[0];
    const statusIcons = {
        'start': 'üöÄ',
        'progress': '‚è≥',
        'success': '‚úÖ',
        'error': '‚ùå',
        'info': '‚ÑπÔ∏è',
        'warning': '‚ö†Ô∏è'
    };
    
    const statusColors = {
        'start': colors.blue,
        'progress': colors.yellow,
        'success': colors.green,
        'error': colors.red,
        'info': colors.cyan,
        'warning': colors.magenta
    };
    
    const icon = statusIcons[status] || 'üìÑ';
    const color = statusColors[status] || colors.reset;
    
    console.log(`${color}[${timestamp}] ${icon} ${message}${colors.reset}${details ? ` ${details}` : ''}`);
}

function showProgress(current, total, item = '') {
    const percentage = Math.round((current / total) * 100);
    const barLength = 25;
    const filledLength = Math.round((percentage / 100) * barLength);
    const bar = '‚ñà'.repeat(filledLength) + '‚ñë'.repeat(barLength - filledLength);
    
    process.stdout.write(`\r${colors.cyan}Progress: [${bar}] ${percentage}% (${current}/${total})${colors.reset} ${item}`);
    if (current === total) console.log(''); // Nouvelle ligne √† la fin
}

/**
 * Clone ou met √† jour le d√©p√¥t MDN
 */
function cloneMdnRepo() {
    logStatus('start', 'T√©l√©chargement du d√©p√¥t MDN officiel...');
    
    try {
        if (existsSync(TEMP_DIR)) {
            logStatus('info', 'Mise √† jour du d√©p√¥t existant...');
            execSync('git pull origin main', { 
                cwd: TEMP_DIR, 
                stdio: 'pipe' 
            });
        } else {
            logStatus('info', 'Clone du d√©p√¥t MDN (shallow clone)...');
            mkdirSync(dirname(TEMP_DIR), { recursive: true });
            
            // Clone shallow pour √©conomiser l'espace (sans l'historique git)
            execSync(`git clone --depth 1 https://github.com/mdn/content.git "${TEMP_DIR}"`, {
                stdio: 'pipe'
            });
        }
        
        logStatus('success', 'D√©p√¥t MDN t√©l√©charg√© avec succ√®s');
        return true;
    } catch (error) {
        logStatus('error', `Erreur lors du t√©l√©chargement: ${error.message}`);
        return false;
    }
}

/**
 * Convertit un fichier MDN Markdown en notre format
 */
function convertMdnFile(filePath, category) {
    try {
        const content = readFileSync(filePath, 'utf-8');
        const fileName = basename(filePath, '.md');
        
        // Extraire le titre du fichier
        const titleMatch = content.match(/^#\s+(.+)$/m);
        const title = titleMatch ? titleMatch[1] : fileName;
        
        // Nettoyer le contenu
        let cleanContent = content
            // Supprimer les m√©tadonn√©es YAML
            .replace(/^---[\s\S]*?---\n/m, '')
            // Supprimer les directives sp√©ciales MDN
            .replace(/{{[^}]+}}/g, '')
            .replace(/\[([^\]]+)\]\(\{\{[^}]+\}\}\)/g, '$1')
            // Nettoyer les liens relatifs
            .replace(/\]\(\/([^)]+)\)/g, '](https://developer.mozilla.org/$1)')
            .trim();
        
        // Ajouter notre en-t√™te
        const header = `# ${title}

> **Source MDN:** [Documentation officielle](https://developer.mozilla.org/en-US/docs/Web/HTML/)  
> **Cat√©gorie:** ${category}  
> **Type:** Documentation HTML5 officielle  
> **D√©p√¥t:** [mdn/content](https://github.com/mdn/content)

---

`;

        // Note de source
        const footer = `

---

## üìö √Ä propos de cette documentation

Cette documentation provient du **d√©p√¥t officiel MDN** (Mozilla Developer Network).

- **Source:** D√©p√¥t GitHub [mdn/content](https://github.com/mdn/content)
- **Mise √† jour:** ${new Date().toLocaleDateString('fr-FR')}
- **Licence:** CC-BY-SA 2.5

> **üí° Conseil:** Cette documentation est synchronis√©e avec les sources officielles MDN.
> Pour la version interactive compl√®te, consultez [developer.mozilla.org](https://developer.mozilla.org).

`;

        return header + cleanContent + footer;
    } catch (error) {
        logStatus('error', `Erreur lors de la conversion: ${error.message}`);
        return null;
    }
}

/**
 * Parcourt les fichiers HTML du d√©p√¥t MDN
 */
function processHtmlDocs() {
    const mdnHtmlPath = join(TEMP_DIR, 'files', 'en-us', 'web', 'html');
    
    if (!existsSync(mdnHtmlPath)) {
        logStatus('error', 'Dossier HTML non trouv√© dans le d√©p√¥t MDN');
        return [];
    }
    
    const categories = {
        'element': 'elements',
        'attributes': 'attributes',
        'global_attributes': 'attributes',
        'reference': 'reference',
        'guide': 'guides'
    };
    
    const processedFiles = [];
    
    function processDirectory(dirPath, category = 'guides') {
        if (!existsSync(dirPath)) return;
        
        const items = readdirSync(dirPath);
        
        for (const item of items) {
            const itemPath = join(dirPath, item);
            const stat = statSync(itemPath);
            
            if (stat.isDirectory()) {
                // D√©terminer la cat√©gorie bas√©e sur le nom du dossier
                const folderCategory = categories[item.toLowerCase()] || item.toLowerCase();
                processDirectory(itemPath, folderCategory);
            } else if (item.endsWith('.md') && item !== 'index.md') {
                // Traiter le fichier Markdown
                const convertedContent = convertMdnFile(itemPath, category);
                
                if (convertedContent) {
                    const outputDir = join(DOCS_DIR, category);
                    if (!existsSync(outputDir)) {
                        mkdirSync(outputDir, { recursive: true });
                    }
                    
                    const outputFile = join(outputDir, item);
                    writeFileSync(outputFile, convertedContent);
                    processedFiles.push({
                        original: itemPath,
                        output: outputFile,
                        category: category,
                        title: basename(item, '.md')
                    });
                }
            }
        }
    }
    
    logStatus('progress', 'Traitement des fichiers HTML du d√©p√¥t...');
    processDirectory(mdnHtmlPath);
    
    return processedFiles;
}

/**
 * Cr√©e des fichiers de documentation HTML de base
 */
function createBasicHtmlDocs() {
    logStatus('info', 'Cr√©ation de la documentation HTML de base...');
    
    const basicDocs = [
        {
            category: 'elements',
            name: 'html-elements-basics.md',
            title: '√âl√©ments HTML de base',
            content: `# √âl√©ments HTML de base

Les √©l√©ments HTML forment la structure de base de toute page web.

## √âl√©ments de structure

### \`<html>\`
L'√©l√©ment racine qui contient tout le contenu de la page.

### \`<head>\`
Contient les m√©tadonn√©es de la page (titre, liens vers CSS, etc.).

### \`<body>\`
Contient le contenu visible de la page.

## √âl√©ments de texte

### \`<h1>\` √† \`<h6>\`
Titres hi√©rarchiques, \`<h1>\` √©tant le plus important.

### \`<p>\`
Paragraphes de texte.

### \`<a>\`
Liens hypertexte avec l'attribut \`href\`.

### \`<strong>\` et \`<em>\`
Texte important (\`<strong>\`) et emphase (\`<em>\`).

## √âl√©ments de liste

### \`<ul>\` et \`<ol>\`
Listes non ordonn√©es et ordonn√©es.

### \`<li>\`
√âl√©ments de liste.

## Exemple de base

\`\`\`html
<!DOCTYPE html>
<html lang="fr">
<head>
    <meta charset="UTF-8">
    <title>Ma page</title>
</head>
<body>
    <h1>Titre principal</h1>
    <p>Un paragraphe avec un <a href="#">lien</a>.</p>
    <ul>
        <li>Premier √©l√©ment</li>
        <li>Deuxi√®me √©l√©ment</li>
    </ul>
</body>
</html>
\`\`\`
`
        },
        {
            category: 'forms',
            name: 'html-forms-basics.md',
            title: 'Formulaires HTML',
            content: `# Formulaires HTML

Les formulaires permettent aux utilisateurs d'interagir avec votre site.

## √âl√©ment \`<form>\`

\`\`\`html
<form action="/submit" method="POST">
    <!-- Contenu du formulaire -->
</form>
\`\`\`

## Champs de saisie

### \`<input>\`
Champ de saisie polyvalent avec diff√©rents types :

\`\`\`html
<input type="text" name="nom" placeholder="Votre nom">
<input type="email" name="email" required>
<input type="password" name="motdepasse">
<input type="submit" value="Envoyer">
\`\`\`

### \`<textarea>\`
Zone de texte multi-lignes :

\`\`\`html
<textarea name="message" rows="4" cols="50">
Votre message...
</textarea>
\`\`\`

### \`<select>\`
Liste d√©roulante :

\`\`\`html
<select name="pays">
    <option value="fr">France</option>
    <option value="be">Belgique</option>
    <option value="ch">Suisse</option>
</select>
\`\`\`

## Validation

### Attributs de validation
- \`required\` : Champ obligatoire
- \`pattern\` : Expression r√©guli√®re
- \`min\`, \`max\` : Valeurs min/max
- \`minlength\`, \`maxlength\` : Longueur du texte

\`\`\`html
<input type="email" required pattern="[^@]+@[^@]+\\.[a-zA-Z]{2,}">
\`\`\`
`
        },
        {
            category: 'semantic',
            name: 'html-semantic-elements.md',
            title: '√âl√©ments s√©mantiques HTML5',
            content: `# √âl√©ments s√©mantiques HTML5

HTML5 introduit des √©l√©ments s√©mantiques qui donnent du sens au contenu.

## Structure de page

### \`<header>\`
En-t√™te de page ou de section.

### \`<nav>\`
Navigation principale.

### \`<main>\`
Contenu principal de la page (unique).

### \`<section>\`
Section th√©matique du contenu.

### \`<article>\`
Contenu autonome et r√©utilisable.

### \`<aside>\`
Contenu compl√©mentaire (sidebar).

### \`<footer>\`
Pied de page ou de section.

## Exemple de structure

\`\`\`html
<!DOCTYPE html>
<html lang="fr">
<head>
    <meta charset="UTF-8">
    <title>Structure s√©mantique</title>
</head>
<body>
    <header>
        <h1>Mon site</h1>
        <nav>
            <ul>
                <li><a href="#accueil">Accueil</a></li>
                <li><a href="#blog">Blog</a></li>
                <li><a href="#contact">Contact</a></li>
            </ul>
        </nav>
    </header>
    
    <main>
        <section>
            <h2>Actualit√©s</h2>
            <article>
                <h3>Titre de l'article</h3>
                <p>Contenu de l'article...</p>
            </article>
        </section>
        
        <aside>
            <h3>√Ä propos</h3>
            <p>Informations compl√©mentaires...</p>
        </aside>
    </main>
    
    <footer>
        <p>&copy; 2025 Mon site</p>
    </footer>
</body>
</html>
\`\`\`

## Avantages

- **SEO am√©lior√©** : Les moteurs de recherche comprennent mieux
- **Accessibilit√©** : Meilleure navigation pour les lecteurs d'√©cran
- **Maintenance** : Code plus lisible et organis√©
`
        }
    ];
    
    for (const doc of basicDocs) {
        const categoryDir = join(DOCS_DIR, doc.category);
        if (!existsSync(categoryDir)) {
            mkdirSync(categoryDir, { recursive: true });
        }
        
        const header = `# ${doc.title}

> **Source:** Documentation cr√©√©e pour le serveur MCP  
> **Cat√©gorie:** ${doc.category}  
> **Type:** Guide HTML5

---

`;

        const footer = `

---

## üìö Compl√©ment

Cette documentation est un guide de base. Pour une r√©f√©rence compl√®te :
- [MDN Web Docs](https://developer.mozilla.org/fr/docs/Web/HTML)
- [W3C HTML Specification](https://www.w3.org/TR/html52/)

---
*Documentation g√©n√©r√©e le ${new Date().toLocaleDateString('fr-FR')}*
`;

        const fullContent = header + doc.content + footer;
        const filePath = join(categoryDir, doc.name);
        writeFileSync(filePath, fullContent);
    }
    
    return basicDocs.length;
}

/**
 * Fonction principale
 */
async function downloadHtmlDocs() {
    logStatus('start', 'T√©l√©chargement de la documentation HTML depuis le d√©p√¥t officiel MDN...');
    
    // Cr√©er le dossier de destination
    if (!existsSync(DOCS_DIR)) {
        mkdirSync(DOCS_DIR, { recursive: true });
    }
    
    // √âtape 1: T√©l√©charger le d√©p√¥t MDN
    const repoSuccess = cloneMdnRepo();
    let processedFiles = [];
    
    if (repoSuccess) {
        // √âtape 2: Traiter les fichiers du d√©p√¥t
        processedFiles = processHtmlDocs();
        logStatus('success', `${processedFiles.length} fichiers trait√©s depuis le d√©p√¥t MDN`);
    } else {
        logStatus('warning', 'Impossible de t√©l√©charger le d√©p√¥t, cr√©ation de documentation de base...');
    }
    
    // √âtape 3: Cr√©er la documentation de base
    const basicDocsCount = createBasicHtmlDocs();
    logStatus('success', `${basicDocsCount} fichiers de documentation de base cr√©√©s`);
    
    // √âtape 4: Cr√©er le fichier de r√©sum√©
    const summaryPath = join(DOCS_DIR, 'README.md');
    const categories = [...new Set([
        ...processedFiles.map(f => f.category),
        'elements', 'forms', 'semantic'
    ])];
    
    const summaryContent = `# Documentation HTML5

Documentation HTML5 combinant les sources officielles MDN et des guides pratiques.

## üìä Statistiques
- **Fichiers du d√©p√¥t MDN:** ${processedFiles.length}
- **Guides cr√©√©s:** ${basicDocsCount}
- **Total:** ${processedFiles.length + basicDocsCount}

## üìö Cat√©gories disponibles

${categories.map(cat => `- **${cat}** - Documentation ${cat === 'elements' ? 'des √©l√©ments' : cat === 'forms' ? 'des formulaires' : cat === 'semantic' ? 's√©mantique' : cat}`).join('\n')}

## üåê Sources

- **D√©p√¥t officiel:** [mdn/content](https://github.com/mdn/content)
- **Documentation en ligne:** [developer.mozilla.org](https://developer.mozilla.org)
- **Guides pratiques:** Cr√©√©s sp√©cialement pour ce serveur MCP

## üìñ Utilisation MCP

Cette documentation est accessible via :
- \`mcp_fullstack-doc_search_docs\` avec technology="html"
- \`mcp_fullstack-doc_get_categories\` pour technology="html"

---
*Documentation g√©n√©r√©e automatiquement le ${new Date().toLocaleString('fr-FR')}*
`;
    
    writeFileSync(summaryPath, summaryContent);
    
    console.log(`\nüéâ Documentation HTML termin√©e !`);
    console.log(`üìä R√©sultat: ${processedFiles.length} fichiers MDN + ${basicDocsCount} guides`);
    console.log(`üìÅ Documentation disponible dans: docs/html/`);
    
    return {
        mdnFiles: processedFiles.length,
        basicFiles: basicDocsCount,
        totalFiles: processedFiles.length + basicDocsCount
    };
}

// Ex√©cuter si appel√© directement
if (import.meta.url === `file://${process.argv[1]}`) {
    downloadHtmlDocs().catch(console.error);
}

export { downloadHtmlDocs };
