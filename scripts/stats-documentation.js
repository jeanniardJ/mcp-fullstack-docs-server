#!/usr/bin/env node

/**
 * Script de statistiques des t√©l√©chargements MCP Fullstack Docs
 * Affiche le statut d√©taill√© de toutes les documentations
 */

import { readFileSync, existsSync, statSync, readdirSync } from 'fs';
import { join, dirname } from 'path';
import { fileURLToPath } from 'url';

const __dirname = dirname(fileURLToPath(import.meta.url));
const configPath = join(__dirname, '..', 'src', 'config', 'technologies.json');

/**
 * Formate la taille en bytes de mani√®re lisible
 */
function formatFileSize(bytes) {
    if (bytes === 0) return '0 B';
    const k = 1024;
    const sizes = ['B', 'KB', 'MB', 'GB'];
    const i = Math.floor(Math.log(bytes) / Math.log(k));
    return parseFloat((bytes / Math.pow(k, i)).toFixed(2)) + ' ' + sizes[i];
}

/**
 * Formate une date de mani√®re lisible
 */
function formatDate(date) {
    return date.toLocaleDateString('fr-FR', {
        year: 'numeric',
        month: '2-digit',
        day: '2-digit',
        hour: '2-digit',
        minute: '2-digit'
    });
}

/**
 * Calcule r√©cursivement la taille et le nombre de fichiers d'un dossier
 */
function getDirStats(dirPath) {
    if (!existsSync(dirPath)) {
        return { files: 0, size: 0, lastModified: null };
    }

    let totalSize = 0;
    let totalFiles = 0;
    let lastModified = new Date(0);

    function scanDir(path) {
        try {
            const items = readdirSync(path);
            for (const item of items) {
                const itemPath = join(path, item);
                const stats = statSync(itemPath);
                
                if (stats.isDirectory()) {
                    scanDir(itemPath);
                } else {
                    totalFiles++;
                    totalSize += stats.size;
                    if (stats.mtime > lastModified) {
                        lastModified = stats.mtime;
                    }
                }
            }
        } catch (error) {
            // Ignore les erreurs d'acc√®s
        }
    }

    scanDir(dirPath);
    return {
        files: totalFiles,
        size: totalSize,
        lastModified: lastModified.getTime() > 0 ? lastModified : null
    };
}

/**
 * V√©rifie le statut d'une technologie
 */
function getTechStatus(techName, techConfig) {
    const docsPath = join(__dirname, '..', techConfig.docsPath);
    const stats = getDirStats(docsPath);
    
    let status = '‚ùå Non t√©l√©charg√©';
    let statusIcon = '‚ùå';
    
    if (stats.files > 0) {
        const daysSinceUpdate = stats.lastModified ? 
            Math.floor((Date.now() - stats.lastModified.getTime()) / (1000 * 60 * 60 * 24)) : null;
        
        if (daysSinceUpdate === null) {
            status = '‚ö†Ô∏è Statut inconnu';
            statusIcon = '‚ö†Ô∏è';
        } else if (daysSinceUpdate === 0) {
            status = '‚úÖ √Ä jour (aujourd\'hui)';
            statusIcon = '‚úÖ';
        } else if (daysSinceUpdate <= 7) {
            status = `‚úÖ R√©cent (${daysSinceUpdate}j)`;
            statusIcon = '‚úÖ';
        } else if (daysSinceUpdate <= 30) {
            status = `‚ö†Ô∏è Ancien (${daysSinceUpdate}j)`;
            statusIcon = '‚ö†Ô∏è';
        } else {
            status = `‚ùå Tr√®s ancien (${daysSinceUpdate}j)`;
            statusIcon = '‚ùå';
        }
    }

    return {
        name: techConfig.name || techName,
        version: techConfig.version || 'N/A',
        description: techConfig.description || '',
        path: docsPath,
        exists: existsSync(docsPath),
        files: stats.files,
        size: stats.size,
        formattedSize: formatFileSize(stats.size),
        lastModified: stats.lastModified,
        formattedDate: stats.lastModified ? formatDate(stats.lastModified) : 'Jamais',
        status,
        statusIcon,
        categories: techConfig.categories?.length || 0
    };
}

/**
 * Affiche les statistiques globales
 */
function displayGlobalStats(technologies) {
    const totalTechs = Object.keys(technologies).length;
    const availableTechs = Object.values(technologies).filter(tech => tech.exists).length;
    const totalFiles = Object.values(technologies).reduce((sum, tech) => sum + tech.files, 0);
    const totalSize = Object.values(technologies).reduce((sum, tech) => sum + tech.size, 0);
    
    console.log('\nüè†====================================');
    console.log('üìä STATISTIQUES GLOBALES MCP FULLSTACK DOCS');
    console.log('======================================üè†\n');
    
    console.log(`üì¶ Technologies configur√©es : ${totalTechs}`);
    console.log(`‚úÖ Technologies disponibles : ${availableTechs}/${totalTechs}`);
    console.log(`üìÑ Total fichiers : ${totalFiles}`);
    console.log(`üíæ Taille totale : ${formatFileSize(totalSize)}`);
    console.log(`üîÑ Couverture : ${Math.round((availableTechs / totalTechs) * 100)}%`);
    
    // Statut global
    if (availableTechs === totalTechs) {
        console.log(`üéâ Statut global : ‚úÖ COMPLET`);
    } else if (availableTechs > totalTechs / 2) {
        console.log(`‚ö†Ô∏è Statut global : üü° PARTIEL`);
    } else {
        console.log(`‚ùå Statut global : üî¥ INCOMPLET`);
    }
}

/**
 * Affiche le d√©tail de chaque technologie
 */
function displayTechDetails(technologies) {
    console.log('\nüìö D√âTAIL PAR TECHNOLOGIE\n');
    console.log('‚îå‚îÄ' + '‚îÄ'.repeat(78) + '‚îê');
    console.log('‚îÇ Tech' + ' '.repeat(12) + '‚îÇ Version' + ' '.repeat(9) + '‚îÇ Fichiers ‚îÇ Taille  ‚îÇ Mise √† jour' + ' '.repeat(5) + '‚îÇ');
    console.log('‚îú‚îÄ' + '‚îÄ'.repeat(78) + '‚î§');
    
    for (const [techName, tech] of Object.entries(technologies)) {
        const name = `${tech.statusIcon} ${tech.name}`.padEnd(16);
        const version = tech.version.padEnd(16);
        const files = tech.files.toString().padStart(8);
        const size = tech.formattedSize.padStart(8);
        const date = tech.formattedDate.padEnd(16);
        
        console.log(`‚îÇ ${name} ‚îÇ ${version} ‚îÇ ${files} ‚îÇ ${size} ‚îÇ ${date} ‚îÇ`);
    }
    
    console.log('‚îî‚îÄ' + '‚îÄ'.repeat(78) + '‚îò');
}

/**
 * Affiche les d√©tails √©tendus
 */
function displayExtendedDetails(technologies) {
    console.log('\nüîç D√âTAILS √âTENDUS\n');
    
    for (const [techName, tech] of Object.entries(technologies)) {
        console.log(`${tech.statusIcon} ${tech.name} (${tech.version})`);
        console.log(`   üìÇ Chemin: ${tech.path}`);
        console.log(`   üìÑ Fichiers: ${tech.files}`);
        console.log(`   üíæ Taille: ${tech.formattedSize}`);
        console.log(`   üìÖ Derni√®re maj: ${tech.formattedDate}`);
        console.log(`   üè∑Ô∏è Cat√©gories: ${tech.categories}`);
        console.log(`   ‚ÑπÔ∏è Statut: ${tech.status}`);
        if (tech.description) {
            console.log(`   üìù Description: ${tech.description}`);
        }
        console.log('');
    }
}

/**
 * Affiche les actions recommand√©es
 */
function displayRecommendations(technologies) {
    console.log('\nüí° ACTIONS RECOMMAND√âES\n');
    
    const missingTechs = Object.entries(technologies).filter(([, tech]) => !tech.exists);
    const oldTechs = Object.entries(technologies).filter(([, tech]) => {
        if (!tech.lastModified) return false;
        const daysSince = Math.floor((Date.now() - tech.lastModified.getTime()) / (1000 * 60 * 60 * 24));
        return daysSince > 30;
    });
    
    if (missingTechs.length > 0) {
        console.log('üì• T√©l√©charger les technologies manquantes:');
        missingTechs.forEach(([techName]) => {
            console.log(`   npm run docs:download:${techName} # ou`);
        });
        console.log('   npm run docs:download:complete  # Tout t√©l√©charger\n');
    }
    
    if (oldTechs.length > 0) {
        console.log('üîÑ Mettre √† jour les technologies anciennes:');
        oldTechs.forEach(([techName, tech]) => {
            const daysSince = Math.floor((Date.now() - tech.lastModified.getTime()) / (1000 * 60 * 60 * 24));
            console.log(`   ${tech.name}: ${daysSince} jours`);
        });
        console.log('   npm run docs:update  # Mettre √† jour tout\n');
    }
    
    if (missingTechs.length === 0 && oldTechs.length === 0) {
        console.log('üéâ Toutes les documentations sont √† jour !');
        console.log('üöÄ Vous pouvez d√©marrer le serveur MCP:');
        console.log('   npm start              # Mode stdio');
        console.log('   npm run start:http     # Mode HTTP\n');
    }
}

/**
 * Fonction principale
 */
async function main() {
    try {
        console.log('üìä Analyse des t√©l√©chargements MCP Fullstack Docs...\n');
        
        // Chargement de la configuration
        if (!existsSync(configPath)) {
            console.error(`‚ùå Configuration non trouv√©e: ${configPath}`);
            process.exit(1);
        }
        
        const config = JSON.parse(readFileSync(configPath, 'utf-8'));
        const technologies = {};
        
        // Analyse de chaque technologie
        for (const [techName, techConfig] of Object.entries(config.technologies || {})) {
            technologies[techName] = getTechStatus(techName, techConfig);
        }
        
        // Affichage des r√©sultats
        displayGlobalStats(technologies);
        displayTechDetails(technologies);
        
        // Mode verbose avec d√©tails √©tendus
        if (process.argv.includes('--verbose') || process.argv.includes('-v')) {
            displayExtendedDetails(technologies);
        }
        
        displayRecommendations(technologies);
        
        console.log('‚úÖ Analyse termin√©e!\n');
        console.log('üí° Utilisez --verbose pour plus de d√©tails');
        
    } catch (error) {
        console.error('‚ùå Erreur lors de l\'analyse:', error.message);
        process.exit(1);
    }
}

// Ex√©cution si appel√© directement
if (import.meta.url === `file://${process.argv[1]}`) {
    main();
}
