#!/usr/bin/env node

async function testServer() {
    console.log('üß™ Test complet du serveur MCP');
    console.log('='.repeat(40));
    
    try {
        // Test 1: Import du service
        console.log('1Ô∏è‚É£ Import du DocumentationService...');
        const { DocumentationService } = await import('./build/services/documentationService.js');
        console.log('   ‚úÖ Import r√©ussi');
        
        // Test 2: Cr√©ation du service
        console.log('2Ô∏è‚É£ Cr√©ation du service...');
        const docService = new DocumentationService();
        console.log('   ‚úÖ Service cr√©√©');
        
        // Test 3: V√©rification des technologies
        console.log('3Ô∏è‚É£ V√©rification des technologies...');
        const technologies = docService.getTechnologies();
        console.log(`   ‚úÖ ${technologies.length} technologies: ${technologies.join(', ')}`);
        
        // Test 4: Import des handlers
        console.log('4Ô∏è‚É£ Import des handlers...');
        const { ToolHandlers } = await import('./build/handlers/toolHandlers.js');
        const handlers = new ToolHandlers(docService);
        console.log('   ‚úÖ Handlers cr√©√©s');
        
        // Test 5: Test de recherche
        console.log('5Ô∏è‚É£ Test de recherche...');
        const searchResult = await handlers.handleSearchDocs({
            query: 'controller',
            technology: 'symfony',
            limit: 1
        });
        console.log('   ‚úÖ Recherche fonctionnelle');
        
        console.log('='.repeat(40));
        console.log('üéâ Tous les tests pass√©s! Le serveur est pr√™t.');
        
    } catch (error) {
        console.error('‚ùå Erreur d√©tect√©e:');
        console.error('   Message:', error.message);
        console.error('   Stack:', error.stack);
        process.exit(1);
    }
}

testServer();
